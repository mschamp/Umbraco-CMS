name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: sqlServerIntegrationTests
    displayName: Run SQL Server Integration Tests
    type: boolean
    default: false
  - name: myGetDeploy
    displayName: Deploy to MyGet
    type: boolean
    default: false

variables:
  buildConfiguration: Release
  SA_PASSWORD: UmbracoIntegration123!
  UMBRACO__CMS_GLOBAL__ID: 00000000-0000-0000-0000-000000000042
  nodeVersion: 14.18.1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  isTag: $[startsWith('$(build.sourceBranch)', 'refs/tags/')]
  isDev: $[endsWith('$(build.sourceBranch)', 'dev')]
  isFeature: $[contains('$(build.sourceBranch)', '/feature/')]

resources:
  containers:
    - container: mssql
      image: 'mcr.microsoft.com/mssql/server:2019-latest'
      env:
        ACCEPT_EULA: 'Y'
        SA_PASSWORD: $(SA_PASSWORD)
        MSSQL_PID: Developer
      ports:
        - '1433:1433'
      options: '--name mssql'

stages:
  ###############################################
  ## Build
  ###############################################
  - stage: Build
    variables:
      npm_config_cache: $(Pipeline.Workspace)/.npm_client
    jobs:
      - job:
        displayName: Build Umbraco CMS
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: Use node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: Cache@2
            displayName: Cache node_modules
            inputs:
              key: '"npm_client" | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/Umbraco.Web.UI.Client/package-lock.json'
              restoreKeys: |
                npm_client | "$(Agent.OS)"
              path: $(npm_config_cache)
          - script: npm ci --no-fund --no-audit --prefer-offline
            workingDirectory:  src/Umbraco.Web.UI.Client
            displayName: Run npm ci
          - task: gulp@0
            displayName: Run gulp build
            inputs:
              gulpFile: src/Umbraco.Web.UI.Client/gulpfile.js
              targets: coreBuild
              workingDirectory: src/Umbraco.Web.UI.Client
          - task: DotNetCoreCLI@2
            displayName: Run dotnet build
            inputs:
              command: build
              projects: umbraco.sln
              arguments: '--configuration $(buildConfiguration)'
          # TODO: Umbraco.Templates as csproj
          # TODO: Umbraco.Cms as csproj
          - task: PowerShell@2
            displayName: Prepare nupkg
            inputs:
              targetType: inline
              script: |
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $source = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
                $nuget="nuget.exe"
                Invoke-WebRequest $source -OutFile $nuget
                dotnet pack --no-build --configuration $(buildConfiguration) umbraco.sln -o $(Build.ArtifactStagingDirectory)/nupkg
                $umbracoVersion = "$(Build.BuildNumber)" -replace "\+",".g"

                $templatePaths = Get-ChildItem 'templates/**/.template.config/template.json'
                foreach ($templatePath in $templatePaths) {
                  $a = Get-Content $templatePath -Raw | ConvertFrom-Json
                  if ($a.symbols -and $a.symbols.UmbracoVersion) {
                    $a.symbols.UmbracoVersion.defaultValue = $umbracoVersion
                    $a | ConvertTo-Json -Depth 32 | Set-Content $templatePath
                  }
                }

                mono ./nuget.exe Pack -Version "$umbracoVersion" templates/Umbraco.Templates.nuspec -outputDirectory $(Build.ArtifactStagingDirectory)/nupkg
                mono ./nuget.exe Pack -Version "$umbracoVersion" build/NuSpecs/UmbracoCms.nuspec -outputDirectory $(Build.ArtifactStagingDirectory)/nupkg
          - task: PublishPipelineArtifact@1
            displayName: Publish nupkg
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg
              artifactName: nupkg
          - task: PublishPipelineArtifact@1
            displayName: Publish build artifacts
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output

  ###############################################
  ## Test
  ###############################################
  - stage: Unit
    displayName: Unit Tests
    dependsOn: Build
    jobs:
      # Unit Tests
      - job:
        displayName: Unit Tests
        strategy:
          matrix:
            Windows:
              vmImage: 'windows-latest'
            Linux:
              vmImage: 'ubuntu-latest'
            macOS:
              vmImage: 'macOS-latest'
        pool:
          vmImage: $(vmImage)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin')) # net6 already on the other images
            displayName: Use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: Run dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.UnitTests.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
              testRunTitle: Unit Tests - $(Agent.OS)

  - stage: Integration
    displayName: Integration Tests
    dependsOn: Build
    jobs:
      # Integration Tests (SQLite)
      - job:
        displayName: Integration Tests (SQLite)
        strategy:
          matrix:
            Windows:
              vmImage: 'windows-latest'
            Linux:
              vmImage: 'ubuntu-latest'
            macOS:
              vmImage: 'macOS-latest'
        pool:
          vmImage: $(vmImage)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            displayName: Use net6
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin')) # net6 already on the other images
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: Run dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
              testRunTitle: Integration Tests SQLite - $(Agent.OS)
            env:
              Tests__Database__DatabaseType: 'Sqlite'
              Umbraco__Cms__global__MainDomLock: 'FileSystemMainDomLock'

      # Integration Tests (SQL Server) Linux
      - job:
        condition: or(not(or(variables.isDev, variables.isFeature)), ${{parameters.sqlServerIntegrationTests}})
        displayName: Integration Tests (SQL Server) Linux
        timeoutInMinutes: 120
        services:
          mssql: mssql
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - task: DotNetCoreCLI@2
            displayName: Run dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
              testRunTitle: Integration Tests SQL Server - $(Agent.OS)
            env:
              Tests__Database__SQLServerMasterConnectionString: 'Server=localhost,1433;User Id=sa;Password=$(SA_PASSWORD);'
              Tests__Database__DatabaseType: SqlServer
              Umbraco__Cms__global__MainDomLock: SqlMainDomLock

      # Integration Tests (SQL Server) Windows
      - job:
        condition: or(not(or(variables.isDev, variables.isFeature)), ${{parameters.sqlServerIntegrationTests}})
        displayName: Integration Tests (SQL Server) Windows
        timeoutInMinutes: 120
        pool:
          vmImage:  'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - powershell: sqllocaldb start mssqllocaldb
            displayName: Start localdb
          - task: DotNetCoreCLI@2
            displayName: Run dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.Integration.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
              testRunTitle: Integration Tests SQL Server - $(Agent.OS)
            env:
              Tests__Database__DatabaseType: LocalDb
              Umbraco__Cms__global__MainDomLock: MainDomSemaphoreLock

  - stage: E2E
    variables:
      npm_config_cache: $(Pipeline.Workspace)/.npm_e2e
    displayName: E2E Tests
    dependsOn: Build
    jobs:
    # E2E Tests
      - job:
        displayName: E2E Tests
        variables:
          - name: Umbraco__CMS__Unattended__InstallUnattended  # Windows only
            value: true
          - name: Umbraco__CMS__Unattended__UnattendedUserName  # Windows only
            value: Cypress Test
          - name: Umbraco__CMS__Unattended__UnattendedUserEmail  # Windows only
            value: cypress@umbraco.com
          - name: Umbraco__CMS__Unattended__UnattendedUserPassword  # Windows only
            value: UmbracoAcceptance123!
          - name: Umbraco__CMS__Global__InstallMissingDatabase  # Windows only
            value: true
          - name: UmbracoDatabaseServer # Windows only
            value: (LocalDB)\MSSQLLocalDB
          - name: UmbracoDatabaseName  # Windows only
            value: Cypress
          - name: ConnectionStrings__umbracoDbDSN  # Windows only
            value: Server=$(UmbracoDatabaseServer);Database=$(UmbracoDatabaseName);Integrated Security=true;
          - name: CYPRESS_BASE_URL
            value: http://localhost:8080
        strategy:
          matrix:
            Linux:
              vmImage: 'ubuntu-latest'
              dockerfile: umbraco-linux.docker
              dockerImageName: umbraco-linux
              cypressBinaries: "/home/vsts/.cache/Cypress"
            Windos:
              vmImage: 'windows-latest'
              cypressBinaries: $(LOCALAPPDATA)/Cypress
        pool:
            vmImage: $(vmImage)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download nupkg
            inputs:
              artifact: nupkg
              path: $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/misc/nupkg
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: Cache@2
            displayName: Cache node_modules
            inputs:
              key: '"npm_e2e" | "$(Agent.OS)" | $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/package-lock.json'
              restoreKeys: |
                npm_e2e | "$(Agent.OS)"
              path: $(npm_config_cache)
          - task: PowerShell@2
            displayName: Generate Cypress.env.json
            inputs:
              targetType: inline
              script: >
                @{ username = "$(Umbraco__CMS__Unattended__UnattendedUserEmail)"; password = "$(Umbraco__CMS__Unattended__UnattendedUserPassword)" } | ConvertTo-Json | Set-Content -Path "tests/Umbraco.Tests.AcceptanceTest/cypress.env.json"#
          - script: npm ci --no-fund --no-audit --prefer-offline
            workingDirectory:  $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/
            displayName: Run npm ci
          - powershell: sqllocaldb start mssqllocaldb
            displayName: Start localdb (Windows only)
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
          - powershell:  Invoke-Sqlcmd -Query "CREATE DATABASE $env:UmbracoDatabaseName" -ServerInstance $env:UmbracoDatabaseServer
            displayName: Create database (Windows only)
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
           # Linux containers smooth
          - task: PowerShell@2
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
            displayName: Build & run container (Linux only)
            inputs:
              workingDirectory: tests/Umbraco.Tests.AcceptanceTest/misc
              targetType: inline
              script: |
                docker build -t $(dockerImageName) -f $(dockerfile) .
                mkdir -p $(Build.ArtifactStagingDirectory)/docker-images
                docker save -o $(Build.ArtifactStagingDirectory)/docker-images/$(dockerImageName).tar $(dockerImageName)
                docker run --name $(dockerImageName) -dp 8080:5000 $(dockerImageName)
                docker ps
          # Windows containers take forever.
          # --no-launch-profile stops ASPNETCORE_ENVIRONMENT=Development which breaks the users.ts tests (smtp config = invite user button)
          # Urls matching docker setup.
          - task: PowerShell@2
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
            displayName: Build & run app (Windows only)
            inputs:
              workingDirectory: tests/Umbraco.Tests.AcceptanceTest/misc
              targetType: inline
              script: |
                dotnet new --install ./nupkg/Umbraco.Templates.*.nupkg
                dotnet new umbraco --name Cypress -o . --no-restore
                dotnet restore --configfile ./nuget.config
                dotnet build --no-restore
                Start-Process -FilePath "dotnet" -ArgumentList "run --no-build --no-launch-profile --urls $(CYPRESS_BASE_URL)"
          - task: PowerShell@2
            displayName: Wait for app
            condition: always()
            continueOnError: true
            inputs:
              targetType: inline
              workingDirectory: tests/Umbraco.Tests.AcceptanceTest
              script: |
                npm i -g wait-on
                wait-on -v -i 1000 $(CYPRESS_BASE_URL)
          - task: PowerShell@2
            displayName: Run Cypress (Desktop)
            condition: always()
            continueOnError: true
            inputs:
              targetType: inline
              workingDirectory: tests/Umbraco.Tests.AcceptanceTest
              script: 'npm run test -- --reporter junit --reporter-options "mochaFile=results/test-output-D-[hash].xml,toConsole=true" --config="viewportHeight=1600,viewportWidth=2560,screenshotsFolder=cypress/artifacts/desktop/screenshots,videosFolder=cypress/artifacts/desktop/videos,videoUploadOnPasses=false"'
          - task: PublishTestResults@2
            displayName: Publish test results
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'tests/Umbraco.Tests.AcceptanceTest/results/test-output-D-*.xml'
              mergeTestResults: true
              testRunTitle: "e2e - $(Agent.OS)"
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/cypress/artifacts
              targetFolder: $(Build.ArtifactStagingDirectory)/cypresss
          - task: PublishPipelineArtifact@1
            displayName: "Publish test artifacts"
            condition: always()
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: 'E2E artifacts - $(Agent.OS) - Attempt #$(System.JobAttempt)'
