name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: sqlServerIntegrationTests
    displayName: Run SQL Server Integration Tests
    type: boolean
    default: false
  - name: myGetDeploy
    displayName: Deploy to MyGet
    type: boolean
    default: false

variables:
  buildConfiguration: Release
  SA_PASSWORD: UmbracoIntegration123!
  UMBRACO__CMS_GLOBAL__ID: 00000000-0000-0000-0000-000000000042
  nodeVersion: 14.18.1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  isTag: $[startsWith('$(build.sourceBranch)', 'refs/tags/')]
  isDev: $[endsWith('$(build.sourceBranch)', 'dev')]
  isFeature: $[contains('$(build.sourceBranch)', '/feature/')]

resources:
  containers:
    - container: mssql
      image: 'mcr.microsoft.com/mssql/server:2019-latest'
      env:
        ACCEPT_EULA: 'Y'
        SA_PASSWORD: $(SA_PASSWORD)
        MSSQL_PID: Developer
      ports:
        - '1433:1433'
      options: '--name mssql'

stages:
  ###############################################
  ## Build
  ###############################################
  - stage: Build
    jobs:
      - job:
        displayName: Build Umbraco CMS
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: Use node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: Cache@2
            displayName: Cache node_modules
            inputs:
              key: '"umbraco_ui_client_node_modules" | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/Umbraco.Web.UI.Client/package-lock.json'
              path: $(Build.SourcesDirectory)/src/Umbraco.Web.UI.Client/node_modules
              cacheHitVar: CACHE_RESTORED
          - task: Npm@1
            displayName: Run npm ci
            condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
            inputs:
              command: ci
              workingDir: src/Umbraco.Web.UI.Client
              verbose: false
          - task: gulp@0
            displayName: Run gulp build
            inputs:
              gulpFile: src/Umbraco.Web.UI.Client/gulpfile.js
              targets: coreBuild
              workingDirectory: src/Umbraco.Web.UI.Client
          - task: DotNetCoreCLI@2
            displayName: Run dotnet build
            inputs:
              command: build
              projects: umbraco.sln
              arguments: '--configuration $(buildConfiguration)'
          - task: PublishPipelineArtifact@1
            displayName: Publish build artifacts
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output

  ###############################################
  ## Pack
  ###############################################
  - stage: Pack
    jobs:
      - job:
        displayName: Pack Umbraco CMS
        variables:
          System.Debug: true
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          # TODO: Pretty sure we can have a Umbraco.Cms.csproj for creating metapackage
          # TODO: Pretty sure we can have a csproj for creating templates also?
          # TODO: Update GitAssemblyInformationalVersion in Umbraco.GitVersioning somehow
          - task: PowerShell@2
            displayName: Prepare nupkg
            inputs:
              targetType: inline
              script: |
               dotnet pack --no-build --configuration $(buildConfiguration) umbraco.sln -o $(Build.ArtifactStagingDirectory)/nupkg
               $nuspecVersion = "$(Build.BuildNumber)" -replace "\+",".g"
               nuget Pack -Version "$nuspecVersion" templates/Umbraco.Templates.nuspec -outputDirectory $(Build.ArtifactStagingDirectory)/nupkg
               nuget Pack -Version "$nuspecVersion" build/NuSpecs/UmbracoCms.nuspec -outputDirectory $(Build.ArtifactStagingDirectory)/nupkg
          - task: PublishPipelineArtifact@1
            displayName: Publish nupkg
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg
              artifactName: nupkg

  ###############################################
  ## Test
  ###############################################
  - stage: Test
    displayName: Test
    dependsOn: Build
    jobs:
      # Unit Tests
      - job:
        displayName: Unit Tests
        strategy:
          matrix:
            Windows:
              vmImage: 'windows-latest'
            Linux:
              vmImage: 'ubuntu-latest'
            macOS:
              vmImage: 'macOS-latest'
        pool:
          vmImage: $(vmImage)
        steps:
          # - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)
          - task: UseDotNet@2
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin')) # net6 already on the other images
            displayName: Use net6
            inputs:
              version: 6.x
          - task: DotNetCoreCLI@2
            displayName: Run dotnet test
            inputs:
              command: test
              projects: '**/*.Tests.UnitTests.csproj'
              arguments: '--no-build --configuration $(buildConfiguration)'
              testRunTitle: Unit Tests - $(Agent.OS)

  #     # Integration Tests (SQLite)
  #     - job:
  #       displayName: Integration Tests (SQLite)
  #       strategy:
  #         matrix:
  #           Windows:
  #             vmImage: 'windows-latest'
  #           Linux:
  #             vmImage: 'ubuntu-latest'
  #           macOS:
  #             vmImage: 'macOS-latest'
  #       pool:
  #         vmImage: $(vmImage)
  #       steps:
  #         - checkout: none
  #         - task: DownloadPipelineArtifact@2
  #           displayName: Download build artifacts
  #           inputs:
  #             artifact: build_output
  #             path: $(Build.SourcesDirectory)
  #         - task: UseDotNet@2
  #           displayName: Use net6
  #           condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin')) # net6 already on the other images
  #           inputs:
  #             version: 6.x
  #         - task: DotNetCoreCLI@2
  #           displayName: Run dotnet test
  #           inputs:
  #             command: test
  #             projects: '**/Umbraco.Tests.Integration.csproj'
  #             arguments: '--no-build --configuration $(buildConfiguration)'
  #             testRunTitle: Integration Tests SQLite - $(Agent.OS)
  #           env:
  #             Tests__Database__DatabaseType: 'Sqlite'
  #             Umbraco__Cms__global__MainDomLock: 'FileSystemMainDomLock'

  #     # Integration Tests (SQL Server)
  #     - job:
  #       condition: or(not(or(variables.isDev, variables.isFeature)), ${{parameters.sqlServerIntegrationTests}})
  #       displayName: Integration Tests (SQL Server) Linux
  #       timeoutInMinutes: 120
  #       services:
  #         mssql: mssql
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #         - checkout: none
  #         - task: DownloadPipelineArtifact@2
  #           displayName: Download build artifacts
  #           inputs:
  #             artifact: build_output
  #             path: $(Build.SourcesDirectory)
  #         - task: DotNetCoreCLI@2
  #           displayName: Run dotnet test
  #           inputs:
  #             command: test
  #             projects: '**/Umbraco.Tests.Integration.csproj'
  #             arguments: '--no-build --configuration $(buildConfiguration)'
  #             testRunTitle: Integration Tests SQL Server - $(Agent.OS)
  #           env:
  #             Tests__Database__SQLServerMasterConnectionString: 'Server=localhost,1433;User Id=sa;Password=$(SA_PASSWORD);'
  #             Tests__Database__DatabaseType: SqlServer
  #             Umbraco__Cms__global__MainDomLock: SqlMainDomLock

  #     - job:
  #       condition: or(not(or(variables.isDev, variables.isFeature)), ${{parameters.sqlServerIntegrationTests}})
  #       displayName: Integration Tests (SQL Server) Windows
  #       timeoutInMinutes: 120
  #       pool:
  #         vmImage:  'windows-latest'
  #       steps:
  #         - checkout: none
  #         - task: DownloadPipelineArtifact@2
  #           displayName: Download build artifacts
  #           inputs:
  #             artifact: build_output
  #             path: $(Build.SourcesDirectory)
  #         - powershell: sqllocaldb start mssqllocaldb
  #           displayName: Start localdb
  #         - task: DotNetCoreCLI@2
  #           displayName: Run dotnet test
  #           inputs:
  #             command: test
  #             projects: '**/Umbraco.Tests.Integration.csproj'
  #             arguments: '--no-build --configuration $(buildConfiguration)'
  #             testRunTitle: Integration Tests SQL Server - $(Agent.OS)
  #           env:
  #             Tests__Database__DatabaseType: LocalDb
  #             Umbraco__Cms__global__MainDomLock: MainDomSemaphoreLock

  #     # E2E Tests
  #     - job:
  #       displayName: E2E Tests
  #       variables:
  #         - name: ConnectionStrings__umbracoDbDSN
  #           value: Data Source=|DataDirectory|/umbraco-cms-cypress.sqlite.db;Cache=Shared;Foreign Keys=True;Pooling=True;
  #         - name: ConnectionStrings__umbracoDbDSN_ProviderName
  #           value: Microsoft.Data.SQLite
  #         - name: Umbraco__CMS__Unattended__InstallUnattended
  #           value: true
  #         - name: Umbraco__CMS__Unattended__UnattendedUserName
  #           value: Cypress Test
  #         - name: Umbraco__CMS__Unattended__UnattendedUserEmail
  #           value: cypress@umbraco.com
  #         - name: Umbraco__CMS__Unattended__UnattendedUserPassword
  #           value: UmbracoAcceptance123!
  #         - name: Umbraco__CMS__Global__InstallMissingDatabase
  #           value: true
  #         - name: ASPNETCORE_ENVIRONMENT
  #           value: Development # because we want std out and we're not using dotnet runls
  #         - name: ASPNETCORE_URLS
  #           value: https://localhost:44331 # Because our cypress setup expects it as such.
  #       strategy:
  #         matrix:
  #           Windows:
  #             vmImage: 'windows-latest'
  #             appArtifact: webapp_windows
  #           Linux:
  #             vmImage: 'ubuntu-latest'
  #             appArtifact: webapp_linux
  #       pool:
  #           vmImage: $(vmImage)
  #       steps:
  #         - checkout: none
  #         - task: DownloadPipelineArtifact@2
  #           displayName: Download build artifacts
  #           inputs:
  #             artifact: build_output
  #             path: $(Build.SourcesDirectory)
  #         - task: DownloadPipelineArtifact@2
  #           displayName: Download app
  #           inputs:
  #             artifact: $(appArtifact)
  #             path: $(Build.SourcesDirectory)/app
  #         - task: NodeTool@0
  #           displayName: Use Node $(nodeVersion)
  #           inputs:
  #             versionSpec: $(nodeVersion)
  #         - task: Cache@2
  #           displayName: Cache node_modules
  #           inputs:
  #             key: '"e2e_test_node_modules" | "$(Agent.OS)" | $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/package-lock.json'
  #             path: $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/node_modules
  #             cacheHitVar: CACHE_RESTORED
  #         - task: Npm@1
  #           displayName: Run npm ci
  #           condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
  #           inputs:
  #             command: ci
  #             workingDir: $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/
  #             verbose: false
  #         # - task: PowerShell@2
  #         #   displayName: Create media dir hack...
  #         #   inputs:
  #         #     workingDirectory: $(Build.SourcesDirectory)/app
  #         #     targetType: inline
  #         #     script: mkdir -p wwwroot/media
  #         # - task: PowerShell@2
  #         #   displayName: Start application (Windows)
  #         #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
  #         #   inputs:
  #         #     workingDirectory: $(Build.SourcesDirectory)/app
  #         #     targetType: inline
  #         #     script: Start-Process -RedirectStandardOutput $(Build.ArtifactStagingDirectory)/dotnet_run_windows.txt -FilePath "dotnet" -ArgumentList "Umbraco.Web.UI.dll"
  #         # - task: Bash@3
  #         #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
  #         #   displayName: Permissions hack (Linux)
  #         #   inputs:
  #         #     workingDirectory: $(Build.SourcesDirectory)/app
  #         #     targetType: 'inline'
  #         #     script: 'chmod +x Umbraco.Web.UI'
  #         # - task: Bash@3
  #         #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
  #         #   displayName: Start application (Linux)
  #         #   inputs:
  #         #     workingDirectory: $(Build.SourcesDirectory)/app
  #         #     targetType: 'inline'
  #         #     script: 'nohup dotnet Umbraco.Web.UI > $(Build.ArtifactStagingDirectory)/dotnet_run_linux.txt &'
  #         # - task: PowerShell@2
  #         #   displayName: Generate Cypress.env.json
  #         #   inputs:
  #         #     targetType: inline
  #         #     script: >
  #         #       @{ username = "$(Umbraco__CMS__Unattended__UnattendedUserEmail)"; password = "$(Umbraco__CMS__Unattended__UnattendedUserPassword)" } | ConvertTo-Json | Set-Content -Path "tests/Umbraco.Tests.AcceptanceTest/cypress.env.json"
  #         # - task: PowerShell@2
  #         #   displayName: Run Cypress (Desktop)
  #         #   condition: always()
  #         #   continueOnError: true
  #         #   inputs:
  #         #     targetType: inline
  #         #     workingDirectory: tests/Umbraco.Tests.AcceptanceTest
  #         #     script: 'npm run test -- --reporter junit --reporter-options "mochaFile=results/test-output-D-[hash].xml,toConsole=true" --config="viewportHeight=1600,viewportWidth=2560,screenshotsFolder=cypress/artifacts/desktop/screenshots,videosFolder=cypress/artifacts/desktop/videos,videoUploadOnPasses=false"'
  #         # - task: PublishTestResults@2
  #         #   displayName: Publish test results
  #         #   condition: always()
  #         #   inputs:
  #         #     testResultsFormat: 'JUnit'
  #         #     testResultsFiles: 'tests/Umbraco.Tests.AcceptanceTest/results/test-output-D-*.xml'
  #         #     mergeTestResults: true
  #         #     testRunTitle: "Test results Desktop"
  #         # - task: CopyFiles@2
  #         #   inputs:
  #         #     sourceFolder: $(Build.SourcesDirectory)/tests/Umbraco.Tests.AcceptanceTest/cypress/artifacts
  #         #     targetFolder: $(Build.ArtifactStagingDirectory)/cypresss
  #         # - task: PublishPipelineArtifact@1
  #         #   displayName: "Publish test artifacts"
  #         #   condition: always()
  #         #   inputs:
  #         #     targetPath: $(Build.ArtifactStagingDirectory)
  #         #     artifact: 'E2E artifacts - $(Agent.OS) - Attempt #$(System.JobAttempt)'
